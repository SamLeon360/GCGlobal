import 'package:easy_localization/easy_localization.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter/rendering.dart';import 'package:shared_preferences/shared_preferences.dart';class GCAddCustomIconItem extends StatefulWidget{  bool phoneRow ;  String iconUrl ;  int index;  GCAddCustomIconItem({required this.iconUrl,required this.phoneRow,required this.index}):super();  @override  State<StatefulWidget> createState() {    // TODO: implement createState    return GCAddCustomState();  }  }class GCAddCustomState extends State<GCAddCustomIconItem>{  @override  Widget build(BuildContext context) {    // TODO: implement build    return Container(      decoration: BoxDecoration(        color: Colors.white,        shape: BoxShape.rectangle,        borderRadius: widget.index==0 ?BorderRadius.only(topRight: Radius.circular(10),topLeft:Radius.circular(10))            :(widget.index == 5?BorderRadius.only(bottomRight: Radius.circular(10),bottomLeft:Radius.circular(10)):BorderRadius.zero      )),      child: Row(        children: [          widget.index==5? Container(            height: 81,width: 24,            alignment: Alignment.topCenter,            margin: EdgeInsets.only(left: 15 ),            padding: EdgeInsets.only(top: 10),            child: Container(              height: 24,width: 24,              decoration: BoxDecoration(                  image: DecorationImage(                      image: AssetImage(widget.iconUrl)                  )              ),            ),          ): Container(            height: 51,width: 24,            margin: EdgeInsets.only(left: 15,top: 0),            alignment: Alignment.topCenter,            padding: EdgeInsets.only(top: 10),            child: Container(              height: 24,width: 24,              decoration: BoxDecoration(                  image: DecorationImage(                      image: AssetImage(widget.iconUrl)                  )              ),            ),          ),          Expanded(child: Container(            height: widget.index == 5? 80: 51,            margin: EdgeInsets.only(left: 15,right: 15,bottom: 5),            decoration: BoxDecoration(                border: Border(bottom: BorderSide(color: Color(0xFFE4E4E4),width: 1))            ),            child: widget.phoneRow?Container(              height: 41,              child: Row(                mainAxisAlignment: MainAxisAlignment.center,                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  Container(                    child: Text(                      tr("香港 (+852)"),                      style: TextStyle(                          fontSize: 14,                          color: Color(0xFF333333)                      ),                    ),                    height: 20,                  ),                  Container(                    height: 16,                    width: 16,                    margin:EdgeInsets.only(left: 4,top: 2) ,                    decoration: BoxDecoration(                        image: DecorationImage(                            image: AssetImage("assets/homepage/down_anchor/icon_xialajiantou@2x.png")                        )                    ),                  ),                  Container(                    margin: EdgeInsets.only(left:20 ),                    width: 1,                    height: 18,                    decoration: BoxDecoration(                        border: Border(right:BorderSide(color: Color(0xFFE4E4E4),width: 1))                    ),                  ),                  Expanded(child: Container(                    alignment: Alignment.centerLeft,                    margin: EdgeInsets.only(left: 20),                    padding: EdgeInsets.only(bottom: 5),                    child: TextField(                      textAlignVertical: TextAlignVertical.center,                      style: TextStyle(                          color: Color(0xFF333333)                      ),                      decoration: InputDecoration(                        border: InputBorder.none,                      ),                    ),                  ))                ],              ),            ):            Container(                alignment: Alignment.topLeft,                margin: EdgeInsets.only(bottom: 15,top:widget.index ==5?0:0),                child: TextField(                  keyboardType: TextInputType.multiline,                  maxLines: 5,                  minLines: 1,                  style: TextStyle(                      color: Color(0xFF333333)                  ),                  decoration: InputDecoration(                    border: InputBorder.none, contentPadding: EdgeInsets.zero                  ),                  ),                )            )          )        ],      ),    );  }  }class GCAddCustomTitleItem extends StatefulWidget{  String title;  int index;  GCAddCustomTitleItem({required this.title,required this.index}):super();  @override  State<StatefulWidget> createState() {    // TODO: implement createState    return GCAddCustomTitleItemState();  }}class GCAddCustomTitleItemState extends State<GCAddCustomTitleItem>{  Future<SharedPreferences> _prefs = SharedPreferences.getInstance();  String local = "" ;  void addLocal() async{      SharedPreferences prefs = await  _prefs;      prefs.setString("local", "en-ch");  }  void getLocal() async{    SharedPreferences prefs = await  _prefs;    setState(() {      local =  prefs.getString("local")!;    });  }  @override  void initState() {    // TODO: implement initState    addLocal();    super.initState();  }  @override  Widget build(BuildContext context) {    // TODO: implement build    return Container(      decoration: BoxDecoration(          color: Colors.white,          shape: BoxShape.rectangle,          borderRadius: widget.index==0 ?BorderRadius.only(topRight: Radius.circular(10),topLeft:Radius.circular(10))              :(BorderRadius.zero)),      alignment: widget.index == 4? Alignment.topLeft: Alignment.centerLeft,      height:  widget.index == 4?81: 51,      child: Row(        mainAxisSize: MainAxisSize.min,        children: [          Container(            width: local=="en"?140:90,            alignment: Alignment.topLeft,            padding: EdgeInsets.only(left: 15 ,top:15),            child: Text(              widget.title,              textAlign: TextAlign.start,              style: TextStyle(                  fontSize: 14,                  color: Color(0xFF333333)              ),            ),          ),          Expanded(child: Container(              height: widget.index == 4? 80: 51,              margin: EdgeInsets.only(left: 0,right: 15,bottom: 5),              decoration: BoxDecoration(                  border: Border(bottom: BorderSide(color: Color(0xFFE4E4E4),width: 1))              ),              child: Container(                alignment: Alignment.topLeft,                margin: EdgeInsets.only(bottom: 15),                child: TextField(                  keyboardType: TextInputType.multiline,                  maxLines: 99,                  minLines: 1,                  style: TextStyle(                      color: Color(0xFF333333)                  ),                  decoration: InputDecoration(                      border: InputBorder.none, contentPadding: EdgeInsets.zero                  ),                ),              )          )          )        ],      ),    );  }  }class GCAddCustomPhotoView extends StatefulWidget{  List<GCImageModel> imageList = [    new GCImageModel(imageUrl: ""),    new GCImageModel(imageUrl: ""),    new GCImageModel(imageUrl: "")  ];  GCAddCustomPhotoView({required this.imageList}):super();  @override  State<StatefulWidget> createState() {    // TODO: implement createState    return GCAddCustomPhotoState();  }}class GCAddCustomPhotoState extends State<GCAddCustomPhotoView>{  @override  Widget build(BuildContext context) {    // TODO: implement build    return Container(      height: 130,      color: Colors.white,      child: Column(        mainAxisAlignment: MainAxisAlignment.start,        children: [          Container(            alignment: Alignment.centerLeft,            margin: EdgeInsets.only(left: 15,top: 14),            child: Text(              tr("圖片"),              style: TextStyle(                fontSize: 14,                color: Color(0xFF333333)              ),            ),          ),          Container(            padding: EdgeInsets.only(left: 0,top: 10,),            height: 76,            width: MediaQuery.of(context).size.width,            child: ListView.builder(itemBuilder: (BuildContext context,int index){                  return  index==widget.imageList.length?Container(                      width: 76,                      height: 76,                      margin: EdgeInsets.only(left: 7.5,right: 7.5),                      decoration: BoxDecoration(                        shape: BoxShape.rectangle,                        borderRadius: BorderRadius.all(Radius.circular(4)),                        image: DecorationImage(                          image: AssetImage("assets/homepage/add_photo/icon_tianjiazhaopian@2x.png")                        )                      ),                  ):Container(                    width: 76,                    height: 76,                    margin:EdgeInsets.only(left: 7.5,right: 7.5),                    decoration: BoxDecoration(                        shape: BoxShape.rectangle,                        borderRadius: BorderRadius.all(Radius.circular(4))                    ),                    child: Image.network(widget.imageList[index].imageUrl),                  );                },              itemCount: widget.imageList.length+1,                scrollDirection:Axis.horizontal            ),          )        ],      ),    );  }}///圖片對象class GCImageModel extends Object{  String imageUrl;  GCImageModel({required this.imageUrl});}